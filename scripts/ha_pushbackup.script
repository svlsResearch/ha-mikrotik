:if ([:len [/system script job find where script="ha_pushbackup"]] > 1) do={:error "already running pushbackup"; }
:global haPassword
:global isMaster
:global haAddressOther
:if (!$isMaster) do={
   :error "NOT MASTER"
} else={
   #Really? this is the only way to create directories?
   :local mkdirCode ":do { /ip smb shares add comment=HA_AUTO name=mkdir disabled=yes directory=/skins } on-error={}"

   :foreach k in=[/file find type="directory"] do={
      :local xferfile [/file get $k name]
      if ([:pick "$xferfile" 0 3] != "HA_") do={
         :set mkdirCode "$mkdirCode\r\n/ip smb shares set [find comment=HA_AUTO] directory=\"$xferfile\""
      }
   }

   :set mkdirCode "$mkdirCode\r\n/ip smb shares remove [find comment=HA_AUTO]\r\n"
   #eh - good chance to keep files in sync, just delete everything, we will reupload. is this going to reduce life of nvram?
   :local purgeFilesCode ":foreach k in=[/file find type!=\"directory\"] do={ :local xferfile [/file get \$k name]; if ([:pick \"\$xferfile\" 0 3] != \"HA_\") do={ :put \"removing \$xferfile\"; /file remove \$k; } }"
   :local purgeKeys "/file remove [find name=\"HA_dsa\" or name=\"HA_rsa\" or name=\"HA_rsa.pem\" or name=\"HA_rsa.pem\"]"
   :set mkdirCode "$purgeKeys;$purgeFilesCode;\r\n/delay 2;\r\n$mkdirCode"

   /file print file=HA_mkdirs.txt
   /file set [find name="HA_mkdirs.txt"] contents=$mkdirCode
   :put "mkdirCode: $mkdirCode end_mkDirCode"
   /tool fetch upload=yes src-path=HA_mkdirs.txt dst-path=HA_mkdirs.auto.rsc address=$haAddressOther user=ha password=$haPassword mode=ftp 
   
   :foreach k in=[/file find type!="directory"] do={
      :local xferfile [/file get $k name]
      if ([:pick "$xferfile" 0 3] != "HA_") do={
         :put "Transferring: $xferfile"
         :do {
            /tool fetch upload=yes src-path=$xferfile dst-path=$xferfile address=$haAddressOther user=ha password=$haPassword mode=ftp
         } on-error={
            :put "Failed to transfer $xferfile"
         }
      }
   }

   #Always export so we don't need to figure out versions.
   /file remove [find name="HA_dsa" or name="HA_rsa" or name="HA_rsa.pem" or name="HA_rsa.pem"]
   /ip ssh export-host-key key-file-prefix="HA"

   :if ([:len [/file find name="HA_dsa"]] = 1) do={
      /tool fetch upload=yes src-path=HA_dsa dst-path=HA_dsa address=$haAddressOther user=ha password=$haPassword mode=ftp
   }
   :if ([:len [/file find name="HA_rsa"]] = 1) do={
      /tool fetch upload=yes src-path=HA_rsa dst-path=HA_rsa address=$haAddressOther user=ha password=$haPassword mode=ftp
   }
   # bugfix v7
   :if ([:len [/file find name="HA_dsa.pem"]] = 1) do={
      /tool fetch upload=yes src-path=HA_dsa.pem dst-path=HA_dsa.pem address=$haAddressOther user=ha password=$haPassword mode=ftp
   }
   :if ([:len [/file find name="HA_rsa.pem"]] = 1) do={
      /tool fetch upload=yes src-path=HA_rsa.pem dst-path=HA_rsa.pem address=$haAddressOther user=ha password=$haPassword mode=ftp
   }

   :global haMasterConfigVer
   [/system script run [find name="ha_setconfigver"]]
   /file print file=HA_run-after-hastartup.txt
   /file set [find name=HA_run-after-hastartup.txt] contents=":global haConfigVer \"$haMasterConfigVer\""
   /tool fetch upload=yes src-path=HA_run-after-hastartup.txt dst-path=HA_run-after-hastartup.rsc address=$haAddressOther user=ha password=$haPassword mode=ftp 

   /export file=HA_b2s.rsc
   /system backup save name=HA_b2s.backup password=p
   /tool fetch upload=yes src-path=HA_b2s.rsc dst-path=HA_b2s.rsc address=$haAddressOther user=ha password=$haPassword mode=ftp  
   /tool fetch upload=yes src-path=HA_b2s.backup dst-path=HA_b2s.backup address=$haAddressOther user=ha password=$haPassword mode=ftp  
   /file print file=HA_restore-backup.rsc; /file set [find name="HA_restore-backup.rsc.txt"] contents="/system backup load name=HA_b2s.backup password=p"
   :do {
      /tool fetch upload=yes src-path=HA_restore-backup.rsc.txt dst-path=HA_restore-backup.auto.rsc address=$haAddressOther user=ha password=$haPassword mode=ftp 
   } on-error={
      :put "OK - status failed is OK from last fetch, standby is rebooting."
   }
}
