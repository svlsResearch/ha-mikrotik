#:do {
#Prevent double running of the startup. Is there a bug in the scheduler? It seems that sometimes our start-time=startup ha_startup
#fires again on newer versions of RouterOS.
:global haAllowBootstrap
:global haStartupHasRun
:global uptime [/system resource get uptime]
:if (!$haAllowBootstrap && ([:typeof $haStartupHasRun] != "nothing" || uptime > 2m)) do={
   /log warning "ha_startup: ERROR ATTEMPTED TO RUN AGAIN!!! $haStartupHasRun $uptime"
   :error "ha_startup: ERROR ATTEMPTED TO RUN AGAIN!!! $haStartupHasRun $uptime"
} else={
:set haStartupHasRun [/system resource get uptime]
:set haAllowBootstrap false
:execute "/interface print detail" file="HA_boot_interface_print.txt"
/log warning "ha_startup: START"
/system script run [find name=ha_functions]
/log warning "ha_startup: 0.1"
/system script run [find name="ha_config"]
/log warning "ha_startup: 0.2"
:global haInterface
#Sometimes the hardware isn't initialized by the time we get here. Wait until we can see the interface.
#https://github.com/svlsResearch/ha-mikrotik/issues/1
:while ([:len [/interface find default-name="$haInterface"]] != 1) do={
   /log error "ha_startup: delaying1 for hardware...cant find $haInterface"
   #Avoid HA_VRRP becoming Master on CCR equipment during slow hardware initialization
   /interface vrrp disable [find where name="HA_VRRP" and disabled=no]
   #Avoid bonding flapping on CCR equipment during slow hardware initialization
   /interface bonding disable [find disabled=no]
   :delay .05
}
/log warning "ha_startup: 0.2b"
#Disable HA_VRRP on startup to avoid this interface becoming master on slave device before $haInterface
#has been initialized successfully
/interface vrrp disable [find where name="HA_VRRP" and disabled=no]
#Disable bonding to avoid flapping during startup
/interface bonding disable [find disabled=no]
/log warning "ha_startup: 0.3"
#Finally take care about all ethernet interfaces
/interface ethernet disable [find disabled=no]
:global haStartupHAVersion "%%%HA_VERSION%%%"
:global isStandbyInSync false
:global isMaster false
:global haPassword
:global haMacA
:global haMacB
:global haAddressA
:global haAddressB
:global haAddressVRRP
:global haNetmask
:global haNetmaskBits
:global haNetwork
:global haMacOther
:global haMacMe
:global haAddressOther
:global haAddressMe
:global haPreferMac

/log warning "ha_startup: version $haStartupHAVersion"

/log warning "ha_startup: 1 $haInterface"
/system scheduler remove [find comment="HA_AUTO"]

#Pause on-error just in case we error out before the spin loop - hope 5 seconds is enough.
/system scheduler add comment=HA_AUTO name=ha_startup on-event=":do {:global haInterface; /system script run [find name=ha_startup]; } on-error={ :delay 5; /interface bonding disable [find disabled=no]; /interface ethernet disable [find where disabled=no and default-name!=\"\$haInterface\" and comment!=\"HA_RESCUE\"]; /log error \"ha_startup: FAILED - DISABLED ALL INTERFACES\" }" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive start-date=Jan/01/1970 start-time=startup
/system scheduler add comment=HA_AUTO name=ha_report_startup on-event="ha_report_startup" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive start-date=Jan/01/1970 start-time=startup

/log warning "ha_startup: 2"

#Spin this initialization code until we succeed. Sometimes RouterOS gives us an error when we try to find an interface
#that is in some sort of transient state, unclear why.
#https://github.com/svlsResearch/ha-mikrotik/issues/7
:global haTmpMac ""
:global haTmpInterfaceName ""
:global haTmpMaxInitTries 120
:global haInitTries 0
#Used to be backwards compatible with pre-bridge config.
:global haInterfaceLogical
:while ($haTmpMac = "" && $haInitTries <= $haTmpMaxInitTries) do={
   :do {
      :set haInitTries ($haInitTries+1)
      #Reset the MAC on the single HA interface - if they are connected via a switch, they need to be unique.
      /interface ethernet reset-mac-address [find default-name="$haInterface"]
      /ip address remove [find interface="$haInterface"]
      /ip address remove [find comment="HA_AUTO"]
      /interface bridge port remove [find comment="HA_AUTO"]
      /interface bridge remove [find comment="HA_AUTO"]
      /interface vrrp remove [find name="HA_VRRP"]
      /ip address remove [find interface="HA_VRRP"]
      /ip firewall filter remove [find comment="HA_AUTO"]
      /ip service set [find name="ftp"] disabled=yes
      /interface ethernet enable [find where disabled=yes and default-name="$haInterface"]
      /interface ethernet enable [find where disabled=yes and comment="HA_RESCUE"]
      /log warning "ha_startup: 2.1 $haInitTries"
      /interface ethernet get [find default-name="$haInterface"] orig-mac-address
      /log warning "ha_startup: 2.2 $haInitTries"
      :set haTmpMac [[/interface ethernet get [find default-name="$haInterface"] orig-mac-address]]
      :set haTmpInterfaceName [[/interface ethernet get [find default-name="$haInterface"] name]]
      /log warning "ha_startup: 2.3"
      /interface bridge add name="bridge-$haInterface" protocol-mode=none fast-forward=yes comment="HA_AUTO"
      /interface bridge port add bridge="bridge-$haInterface" interface="$haTmpInterfaceName" comment="HA_AUTO"
      :set haInterfaceLogical "bridge-$haInterface"
      /log warning "ha_startup: 3 $haTmpMac $haInitTries"
   } on-error={
      /log error "ha_startup: delaying2 for hardware...$haInitTries"
      :delay 1
   }
}

/log warning "ha_startup: 3.1 $haTmpMac $haInitTries"

:local mac "$haTmpMac"

:if ("$mac" = "$haMacA") do={
   :global haIdentity "A"
   /log warning "I AM A"
   /ip address add interface="bridge-$haInterface" address=$haAddressA netmask=$haNetmask comment="HA_AUTO"
   :global haAddressMe $haAddressA
   :global haAddressOther $haAddressB
   :global haMacMe $haMacA
   :global haMacOther $haMacB
} else={
   :if ("$mac" = "$haMacB") do={
      :global haIdentity "B"
      /log warning "I AM B"
      /ip address add interface="bridge-$haInterface" address=$haAddressB netmask=$haNetmask comment="HA_AUTO"
      :global haAddressMe $haAddressB
      :global haAddressOther $haAddressA
      :global haMacMe $haMacB
      :global haMacOther $haMacA
   } else={
      #This is a very strange bug...maybe just in the CCR? Sometimes when the unit comes up, ethernet interfaces sometimes have swapped positions?
      #A reboot clears this error - it is very odd, I don't know if it is a race condition in hardware initialization or something.
      #I'm not sure this covers ALL cases, since it only checks the MAC of the one interface our HA runs over. It might not right now :(
      #Do we need to track all MACs to make sure they are in the right order? This seems like a general problem with the platform but I don't understand the extent of it.
      #Am I causing this?
      :global haIdentity "UKNOWN"
      /log warning "I AM UNKNOWN - WRONG MAC"
      /delay 15
      :execute "/system reboot"
      /delay 1000
   }
}

:local vrrpPriority 100

:if ("$haMacMe" = "$haPreferMac") do={
   :set vrrpPriority 150
   /log warning "ha_startup: 3.5 haPreferMac=$haPreferMac is me! new vrrpPriority=$vrrpPriority"
}

/ip route remove [find comment="HA_AUTO"]
/ip route add gateway=$haAddressOther distance=250 comment=HA_AUTO

/log warning "ha_startup: 4"

#If firewall is empty, place-before=0 won't work. Add first rule.
:if ([:len [/ip firewall filter find]] = 0) do={
   /log warning "ha_startup: 4.1"
   /ip firewall filter add chain=output action=accept out-interface="bridge-$haInterface" comment="HA_AUTO"
   /ip firewall filter add chain=input action=accept in-interface="bridge-$haInterface" comment="HA_AUTO"
} else={
   /log warning "ha_startup: 4.2"
   /ip firewall filter add chain=output action=accept out-interface="bridge-$haInterface" comment="HA_AUTO" place-before=0
   /ip firewall filter add chain=input action=accept in-interface="bridge-$haInterface" comment="HA_AUTO" place-before=0
}
/log warning "ha_startup: 4.3"

/log warning "ha_startup: 5"
/interface vrrp add interface="bridge-$haInterface" version=3 interval=1 priority="$vrrpPriority" name=HA_VRRP on-backup="ha_onbackup" on-master="ha_onmaster" disabled=yes
/ip address add address=$haAddressVRRP netmask=255.255.255.255 interface=HA_VRRP comment="HA_AUTO"

/log warning "ha_startup: 6"
/system scheduler add comment=HA_AUTO interval=10m name=ha_exportcurrent on-event="/export file=\"HA_current.rsc\"" policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive start-date=Jan/01/1970 start-time=00:05:00
/system scheduler add interval=10m name=ha_checkchanges on-event=ha_checkchanges policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive start-date=Jan/01/1970 start-time=00:10:00 comment=HA_AUTO
#Still need this - things like DHCP leases dont cause a system config change, we want to backup periodically.
/system scheduler add comment=HA_AUTO interval=24h name=ha_auto_pushbackup on-event=ha_pushbackup policy=ftp,reboot,read,write,policy,test,password,sniff,sensitive start-date=Jan/01/1970 start-time=05:00:00
/log warning "ha_startup: 7"
/log warning "ha_startup: 7.1"
:if ([:len [/file find name="HA_dsa"]] = 1) do={
   /ip ssh import-host-key private-key-file=HA_dsa
}
/log warning "ha_startup: 7.2"
:if ([:len [/file find name="HA_rsa"]] = 1) do={
   /ip ssh import-host-key private-key-file=HA_rsa
}
# bugfix v7
/log warning "ha_startup: 7.3"
:if ([:len [/file find name="HA_dsa.pem"]] = 1) do={
   /ip ssh import-host-key private-key-file=HA_dsa.pem
}
/log warning "ha_startup: 7.4"
:if ([:len [/file find name="HA_rsa.pem"]] = 1) do={
   /ip ssh import-host-key private-key-file=HA_rsa.pem
}
/user remove [find comment=HA_AUTO]
/user add address="$haNetwork/$haNetmaskBits" comment=HA_AUTO group=full name=ha password="$haPassword"
/log warning "ha_startup: 8"

#So you dont get annoyed with constant beeping - try catch because this may fail on some platforms (x86).
:do {/system routerboard settings set silent-boot=yes} on-error={};

:foreach service in=[:toarray "ftp"] do={
   :local serviceAddresses ""
   :foreach k in=[/ip service get [find name=$service] address] do={
      :if ($k != "$haAddressA/32" and $k != "$haAddressB/32" and $k != "$haAddressVRRP/32") do={
         :set serviceAddresses "$serviceAddresses,$k"
      }
   }
   :set serviceAddresses "$serviceAddresses,$haAddressA,$haAddressB,$haAddressVRRP"
   /ip service set [find name=$service] address=[:toarray $serviceAddresses]
}

:if ([:len [/file find where name="HA_run-after-hastartup.rsc"]] > 0) do={
   /import HA_run-after-hastartup.rsc
}
/delay 5
#We need FTP to do our HA work
/ip service set [find name="ftp"] disabled=no

/log warning "ha_startup: 9"
/interface vrrp set [find interface="bridge-$haInterface"] disabled=no
/log warning "ha_startup: 9.1"

/log warning "ha_startup: DONE"
:put "ha_startup: DONE"

#} on-error={
#   /log warning "ha_startup: FAILED got error! disabling all interfaces!"
#   /interface bonding disable [find]
#   /interface ethernet disable [find]
#}

:do { :local k [/system script find name="on_startup"]; if ([:len $k] = 1) do={ /system script run $k } } on-error={ :put "on_startup failed" }
}
